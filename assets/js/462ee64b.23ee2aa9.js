"use strict";(self.webpackChunkpostgraph_web=self.webpackChunkpostgraph_web||[]).push([[2024],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>m});var r=a(7294);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function n(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?n(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):n(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,r,l=function(e,t){if(null==e)return{};var a,r,l={},n=Object.keys(e);for(r=0;r<n.length;r++)a=n[r],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(r=0;r<n.length;r++)a=n[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var u=r.createContext({}),d=function(e){var t=r.useContext(u),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},p=function(e){var t=d(e.components);return r.createElement(u.Provider,{value:t},e.children)},o="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},v=r.forwardRef((function(e,t){var a=e.components,l=e.mdxType,n=e.originalType,u=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),o=d(a),v=l,m=o["".concat(u,".").concat(v)]||o[v]||c[v]||n;return a?r.createElement(m,s(s({ref:t},p),{},{components:a})):r.createElement(m,s({ref:t},p))}));function m(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var n=a.length,s=new Array(n);s[0]=v;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i[o]="string"==typeof e?e:l,s[1]=i;for(var d=2;d<n;d++)s[d]=a[d];return r.createElement.apply(null,s)}return r.createElement.apply(null,a)}v.displayName="MDXCreateElement"},6093:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>c,frontMatter:()=>n,metadata:()=>i,toc:()=>d});var r=a(7462),l=(a(7294),a(3905));const n={layout:"default",title:"CREATE",nav_order:4,description:"The CREATE clause is used to create vertices and edges."},s="Create Clause",i={unversionedId:"Clauses/CREATE",id:"Clauses/CREATE",title:"CREATE",description:"The CREATE clause is used to create vertices and edges.",source:"@site/docs/03-Clauses/04-CREATE.md",sourceDirName:"03-Clauses",slug:"/Clauses/CREATE",permalink:"/docs/Clauses/CREATE",draft:!1,editUrl:"https://github.com/postgraphdb/postgraphdb.github.io/tree/code/docs/03-Clauses/04-CREATE.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{layout:"default",title:"CREATE",nav_order:4,description:"The CREATE clause is used to create vertices and edges."},sidebar:"tutorialSidebar",previous:{title:"RETURN",permalink:"/docs/Clauses/RETURN"},next:{title:"SET",permalink:"/docs/Clauses/SET"}},u={},d=[{value:"Create vertices",id:"create-vertices",level:2},{value:"Create single vertex",id:"create-single-vertex",level:4},{value:"Query",id:"query",level:4},{value:"Result",id:"result",level:4},{value:"Create multiple vertices",id:"create-multiple-vertices",level:3},{value:"Query",id:"query-1",level:4},{value:"Result",id:"result-1",level:4},{value:"Create a vertex with a label",id:"create-a-vertex-with-a-label",level:3},{value:"Query",id:"query-2",level:4},{value:"Result",id:"result-2",level:4},{value:"Create a vertex with multiple labels",id:"create-a-vertex-with-multiple-labels",level:3},{value:"Query",id:"query-3",level:4},{value:"Result",id:"result-3",level:4},{value:"Create vertex and add labels and properties",id:"create-vertex-and-add-labels-and-properties",level:3},{value:"Query",id:"query-4",level:4},{value:"Result",id:"result-4",level:4},{value:"Return created vertex",id:"return-created-vertex",level:3},{value:"Query",id:"query-5",level:4},{value:"Result",id:"result-5",level:4},{value:"Create edges",id:"create-edges",level:2},{value:"Create a edge between two vertices",id:"create-a-edge-between-two-vertices",level:3},{value:"Query",id:"query-6",level:4},{value:"Result",id:"result-6",level:4},{value:"Create a edge and set properties",id:"create-a-edge-and-set-properties",level:3},{value:"Query",id:"query-7",level:4},{value:"Result",id:"result-7",level:4},{value:"Create a full traversal",id:"create-a-full-traversal",level:3},{value:"Query",id:"query-8",level:4},{value:"Result",id:"result-8",level:4}],p={toc:d},o="wrapper";function c(e){let{components:t,...a}=e;return(0,l.kt)(o,(0,r.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"create-clause"},"Create Clause"),(0,l.kt)("h2",{id:"create-vertices"},"Create vertices"),(0,l.kt)("h4",{id:"create-single-vertex"},"Create single vertex"),(0,l.kt)("p",null,"Creating a single vertex is done by issuing the following query:"),(0,l.kt)("h4",{id:"query"},"Query"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM cypher('create', $$\n    CREATE (n)\n$$) as (movie vertex);\n")),(0,l.kt)("h4",{id:"result"},"Result"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"v")))),(0,l.kt)("h3",{id:"create-multiple-vertices"},"Create multiple vertices"),(0,l.kt)("p",null,"Creating multiple vertices is done by separating them with a comma."),(0,l.kt)("h4",{id:"query-1"},"Query"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM cypher('create', $$\n    CREATE (n), (m)\n$$) as (movie vertex);\n")),(0,l.kt)("h4",{id:"result-1"},"Result"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"v")))),(0,l.kt)("h3",{id:"create-a-vertex-with-a-label"},"Create a vertex with a label"),(0,l.kt)("p",null,"To add a label when creating a vertex, use the syntax below:"),(0,l.kt)("h4",{id:"query-2"},"Query"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM cypher('create', $$\n     CREATE (n:Person)\n$$) as (movie vertex);\n")),(0,l.kt)("h4",{id:"result-2"},"Result"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"v")))),(0,l.kt)("h3",{id:"create-a-vertex-with-multiple-labels"},"Create a vertex with multiple labels"),(0,l.kt)("p",null,"To add labels when creating a vertex, use the syntax below. In this case, we add two labels."),(0,l.kt)("h4",{id:"query-3"},"Query"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM cypher('create', $$\n    CREATE (n:Person:Swedish)\n$$) as (movie vertex);\n")),(0,l.kt)("h4",{id:"result-3"},"Result"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"v")))),(0,l.kt)("h3",{id:"create-vertex-and-add-labels-and-properties"},"Create vertex and add labels and properties"),(0,l.kt)("p",null,"When creating a new vertex with labels, you can add properties at the same time."),(0,l.kt)("h4",{id:"query-4"},"Query"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM cypher('create', $$\n    CREATE (n:Person {name: 'Andy', title: 'Developer'})\n$$) as (movie vertex);\n")),(0,l.kt)("h4",{id:"result-4"},"Result"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"v")))),(0,l.kt)("h3",{id:"return-created-vertex"},"Return created vertex"),(0,l.kt)("p",null,"Creating a single vertex is done by issuing the following query:"),(0,l.kt)("h4",{id:"query-5"},"Query"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM cypher('create', $$\n    CREATE (a {name: 'Andy'})\nRETURN a.name\n$$) as (movie vertex);\n")),(0,l.kt)("p",null,"The name of the newly-created vertex is returned."),(0,l.kt)("h4",{id:"result-5"},"Result"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"name"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},'"Andy"')))),(0,l.kt)("h2",{id:"create-edges"},"Create edges"),(0,l.kt)("h3",{id:"create-a-edge-between-two-vertices"},"Create a edge between two vertices"),(0,l.kt)("p",null,"To create a edge between two vertices, we first get the two vertices. Once the vertices are loaded, we simply create a edge between them."),(0,l.kt)("h4",{id:"query-6"},"Query"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM cypher('create', $$\n    MATCH\n      (a:Person),\n      (b:Person)\n    WHERE a.name = 'A' AND b.name = 'B'\n    CREATE (a)-[r:RELTYPE]->(b)\n    RETURN type(r)\n$$) as (movie vertex);\n")),(0,l.kt)("p",null,"The created edge is returned by the query."),(0,l.kt)("h4",{id:"result-6"},"Result"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},'"RELTYPE"')))),(0,l.kt)("h3",{id:"create-a-edge-and-set-properties"},"Create a edge and set properties"),(0,l.kt)("p",null,"Setting properties on edges is done in a similar manner to how it\u2019s done when creating vertices. Note that the values can be any expression."),(0,l.kt)("h4",{id:"query-7"},"Query"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM cypher('create', $$\n    MATCH\n      (a:Person),\n      (b:Person)\n    WHERE a.name = 'A' AND b.name = 'B'\n    CREATE (a)-[r:RELTYPE {name: a.name + '<->' + b.name}]->(b)\n    RETURN type(r), r.name\n$$) as (movie vertex);\n")),(0,l.kt)("p",null,"The type and name of the newly-created edge is returned by the example query."),(0,l.kt)("h4",{id:"result-7"},"Result"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},'"RELTYPE"')))),(0,l.kt)("h3",{id:"create-a-full-traversal"},"Create a full traversal"),(0,l.kt)("p",null,"When you use CREATE and a pattern, all parts of the pattern that are not already in scope at this time will be created."),(0,l.kt)("h4",{id:"query-8"},"Query"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM cypher('create', $$\n    CREATE p = (:Person {name:'Andy'})-[:WORKS_AT]->(:Company {name: 'Neo4j'})<-[:WORKS_AT]-(:Person {name: 'Michael'})\n    RETURN p\n$$) as (movie vertex);\n")),(0,l.kt)("p",null,"This query creates three vertices and two edges in one go, assigns it to a path variable, and returns it."),(0,l.kt)("h4",{id:"result-8"},"Result"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"t"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"[ ","{",'id: 0, label:"Person", properties: ',"{",'name: "Andy" ',"}"," ","}",", ","{",'id: 1, startid:0, endid: 2, label: "WORKS_AT", properties: ',"{"," ","}"," ","}",", ","{",'id: 2, label: "Company", properties: ',"{",'name: "PostGraphDB" ',"}"," ","}",", ","{",' id: 1, startid:3, endid: 2, label: "WORKS_AT", properties: ',"{"," ","}"," ","}",", ","{",'id: 0, label:"Person", properties: ',"{",'name: "Michael" ',"}"," ","}"," ]")))))}c.isMDXComponent=!0}}]);
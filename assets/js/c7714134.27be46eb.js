"use strict";(self.webpackChunkpostgraph_web=self.webpackChunkpostgraph_web||[]).push([[2110],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>c});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),u=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(o.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},k=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=u(n),k=r,c=d["".concat(o,".").concat(k)]||d[k]||m[k]||l;return n?a.createElement(c,i(i({ref:t},p),{},{components:n})):a.createElement(c,i({ref:t},p))}));function c(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=k;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[d]="string"==typeof e?e:r,i[1]=s;for(var u=2;u<l;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}k.displayName="MDXCreateElement"},9479:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>m,frontMatter:()=>l,metadata:()=>s,toc:()=>u});var a=n(7462),r=(n(7294),n(3905));const l={layout:"default",title:"List Functions",nav_order:3,description:"List functions return lists of things\u2009\u2014\u2009nodes in a path, and so on."},i="Lists",s={unversionedId:"Functions/list-functions",id:"Functions/list-functions",title:"List Functions",description:"List functions return lists of things\u2009\u2014\u2009nodes in a path, and so on.",source:"@site/docs/04-Functions/03-list-functions.md",sourceDirName:"04-Functions",slug:"/Functions/list-functions",permalink:"/docs/Functions/list-functions",draft:!1,editUrl:"https://github.com/postgraphdb/postgraphdb.github.io/tree/code/docs/04-Functions/03-list-functions.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{layout:"default",title:"List Functions",nav_order:3,description:"List functions return lists of things\u2009\u2014\u2009nodes in a path, and so on."},sidebar:"tutorialSidebar",previous:{title:"Scaler Functions",permalink:"/docs/Functions/scaler-functions"},next:{title:"Numeric Functions",permalink:"/docs/Functions/numeric-functions"}},o={},u=[{value:"Head()",id:"head",level:2},{value:"Keys()",id:"keys",level:2},{value:"Syntax",id:"syntax",level:3},{value:"Returns",id:"returns",level:3},{value:"Arguments",id:"arguments",level:3},{value:"Considerations",id:"considerations",level:3},{value:"Example 1. keys()",id:"example-1-keys",level:3},{value:"Query",id:"query",level:4},{value:"Result",id:"result",level:4},{value:"Labels()",id:"labels",level:2},{value:"Syntax",id:"syntax-1",level:3},{value:"Returns",id:"returns-1",level:3},{value:"Arguments",id:"arguments-1",level:3},{value:"Considerations",id:"considerations-1",level:3},{value:"Example 1. labels()",id:"example-1-labels",level:3},{value:"Query",id:"query-1",level:4},{value:"Result",id:"result-1",level:3},{value:"Nodes()",id:"nodes",level:2},{value:"Range()",id:"range",level:2},{value:"Syntax",id:"syntax-2",level:3},{value:"Returns",id:"returns-2",level:3},{value:"Arguments",id:"arguments-2",level:3},{value:"Example 1. range()",id:"example-1-range",level:3},{value:"Query",id:"query-2",level:4},{value:"Result",id:"result-2",level:4},{value:"Relationships()",id:"relationships",level:2},{value:"Reverse()",id:"reverse",level:2},{value:"Syntax",id:"syntax-3",level:3},{value:"Returns",id:"returns-3",level:3},{value:"Arguments",id:"arguments-3",level:3},{value:"Considerations",id:"considerations-2",level:3},{value:"Example 7. reverse()",id:"example-7-reverse",level:3},{value:"Query",id:"query-3",level:4},{value:"Result",id:"result-3",level:4},{value:"Tail()",id:"tail",level:2},{value:"Syntax:",id:"syntax-4",level:3},{value:"Returns:",id:"returns-4",level:3},{value:"Arguments:",id:"arguments-4",level:3},{value:"Example 8. tail()",id:"example-8-tail",level:3},{value:"Query",id:"query-4",level:4},{value:"Result",id:"result-4",level:4}],p={toc:u},d="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"lists"},"Lists"),(0,r.kt)("h1",{id:"data-setup"},"Data Setup"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT create_graph('lists');\n\nSELECT * FROM cypher('lists', $$\nCREATE\n  (alice:Person:Developer {name:'Alice', age: 38, eyes: 'brown'}),\n  (bob {name: 'Bob', age: 25, eyes: 'blue'}),\n  (charlie {name: 'Charlie', age: 53, eyes: 'green'}),\n  (daniel {name: 'Daniel', age: 54, eyes: 'brown'}),\n  (eskil {name: 'Eskil', age: 41, eyes: 'blue', array: ['one', 'two', 'three']}),\n  (alice)-[:KNOWS]->(bob),\n  (alice)-[:KNOWS]->(charlie),\n  (bob)-[:KNOWS]->(daniel),\n  (charlie)-[:KNOWS]->(daniel),\n  (bob)-[:MARRIED]->(eskil)\n$$) as (title gtype);\n")),(0,r.kt)("h1",{id:"functions"},"Functions"),(0,r.kt)("h2",{id:"head"},"Head()"),(0,r.kt)("h2",{id:"keys"},"Keys()"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"keys")," returns a list containing the string representations for all the property names of a vertex, edge, or map."),(0,r.kt)("h3",{id:"syntax"},"Syntax"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"keys(expression)")),(0,r.kt)("h3",{id:"returns"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"A list containing String elements.")),(0,r.kt)("h3",{id:"arguments"},"Arguments"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"expression"),(0,r.kt)("td",{parentName:"tr",align:"center"},"An expression returning a vertex, edge, or map.")))),(0,r.kt)("h3",{id:"considerations"},"Considerations"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"keys(null) returns null.")),(0,r.kt)("h3",{id:"example-1-keys"},"Example 1. keys()"),(0,r.kt)("h4",{id:"query"},"Query"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM cypher('lists', $$\n    MATCH (a) WHERE a.name = 'Alice'\n    RETURN keys(a)\n$$) as (keys gtype);\n")),(0,r.kt)("p",null,"A list containing the names of all the properties on the node bound to a is returned."),(0,r.kt)("h4",{id:"result"},"Result"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"keys"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},'["eyes","name","age"]')))),(0,r.kt)("h2",{id:"labels"},"Labels()"),(0,r.kt)("p",null,"labels returns a list containing the string representations for all the labels of a node."),(0,r.kt)("h3",{id:"syntax-1"},"Syntax"),(0,r.kt)("p",null,"labels(node)"),(0,r.kt)("h3",{id:"returns-1"},"Returns"),(0,r.kt)("p",null,"A list containing String elements."),(0,r.kt)("h3",{id:"arguments-1"},"Arguments"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"expression"),(0,r.kt)("td",{parentName:"tr",align:"center"},"An expression returning a vertex or edge.")))),(0,r.kt)("h3",{id:"considerations-1"},"Considerations"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"labels(null) returns null.")),(0,r.kt)("h3",{id:"example-1-labels"},"Example 1. labels()"),(0,r.kt)("h4",{id:"query-1"},"Query"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM cypher('lists', $$\n    MATCH (a) WHERE a.name = 'Alice'\n    RETURN labels(a)\n$$) as (labels gtype);\n")),(0,r.kt)("p",null,"A list containing all the labels of the node bound to a is returned."),(0,r.kt)("h3",{id:"result-1"},"Result"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"labels"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},'["Person"]')))),(0,r.kt)("h2",{id:"nodes"},"Nodes()"),(0,r.kt)("h2",{id:"range"},"Range()"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"range()")," returns a list comprising all integer values within a range bounded by a start value start and end value end, where the difference step between any two consecutive values is constant; i.e. an arithmetic progression. To create ranges with decreasing integer values, use a negative value step. The range is inclusive for non-empty ranges, and the arithmetic progression will therefore always contain start and\u2009\u2014\u2009depending on the values of start, step and end\u2009\u2014\u2009end. The only exception where the range does not contain start are empty ranges. An empty range will be returned if the value step is negative and start - end is positive, or vice versa, e.g. range(0, 5, -1)."),(0,r.kt)("h3",{id:"syntax-2"},"Syntax"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"range(start, end [, step])")),(0,r.kt)("h3",{id:"returns-2"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"A list of Integer elements.")),(0,r.kt)("h3",{id:"arguments-2"},"Arguments"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"start"),(0,r.kt)("td",{parentName:"tr",align:"center"},"An expression that returns an integer value.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"end"),(0,r.kt)("td",{parentName:"tr",align:"center"},"An expression that returns an integer value.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"step"),(0,r.kt)("td",{parentName:"tr",align:"center"},"A numeric expression defining the difference between any two consecutive values, with a default of 1.")))),(0,r.kt)("h3",{id:"example-1-range"},"Example 1. range()"),(0,r.kt)("h4",{id:"query-2"},"Query"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM cypher('lists', $$\n    RETURN range(0, 10), range(2, 18, 3), range(0, 5, -1)\n$$) as (r1 gtype, r2 gtype, r3 gtype);\n")),(0,r.kt)("p",null,"Three lists of numbers in the given ranges are returned."),(0,r.kt)("h4",{id:"result-2"},"Result"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"r1"),(0,r.kt)("th",{parentName:"tr",align:"center"},"r2"),(0,r.kt)("th",{parentName:"tr",align:"left"},"r3"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"[0,1,2,3,4,5,6,7,8,9,10]"),(0,r.kt)("td",{parentName:"tr",align:"center"},"[2,5,8,11,14,17]"),(0,r.kt)("td",{parentName:"tr",align:"left"},"[]")))),(0,r.kt)("h2",{id:"relationships"},"Relationships()"),(0,r.kt)("h2",{id:"reverse"},"Reverse()"),(0,r.kt)("p",null,"reverse() returns a list in which the order of all elements in the original list have been reversed."),(0,r.kt)("h3",{id:"syntax-3"},"Syntax"),(0,r.kt)("p",null,"reverse(original)"),(0,r.kt)("h3",{id:"returns-3"},"Returns"),(0,r.kt)("p",null,"A list containing homogeneous or heterogeneous elements; the types of the elements are determined by the elements within original."),(0,r.kt)("h3",{id:"arguments-3"},"Arguments"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"list"),(0,r.kt)("td",{parentName:"tr",align:"center"},"An expression that returns a list.")))),(0,r.kt)("h3",{id:"considerations-2"},"Considerations"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Any null element in original is preserved.")),(0,r.kt)("h3",{id:"example-7-reverse"},"Example 7. reverse()"),(0,r.kt)("h4",{id:"query-3"},"Query"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM cypher('lists', $$\n    WITH [4923,'abc',521, null, 487] AS ids\n    RETURN reverse(ids)\n$$) as (ids gtype);\n")),(0,r.kt)("h4",{id:"result-3"},"Result"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"labels"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},'[487, null, 521, "abc", 4923]')))),(0,r.kt)("h2",{id:"tail"},"Tail()"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"tail()")," returns a list containing all the elements, excluding the first one, from the argument list."),(0,r.kt)("h3",{id:"syntax-4"},"Syntax:"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"tail(list)")),(0,r.kt)("h3",{id:"returns-4"},"Returns:"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"A list containing heterogeneous elements; the types of the elements are determined by the elements in list.")),(0,r.kt)("h3",{id:"arguments-4"},"Arguments:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"list"),(0,r.kt)("td",{parentName:"tr",align:"center"},"An expression that returns a list.")))),(0,r.kt)("h3",{id:"example-8-tail"},"Example 8. tail()"),(0,r.kt)("h4",{id:"query-4"},"Query"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM cypher('lists', $$\n    MATCH (a)\n    WHERE a.name = 'Eskil'\n    RETURN a.array, tail(a.array)\n$$) as (arr gtype, tail gtype);\n")),(0,r.kt)("p",null,"The property named array and a list comprising all but the first element of the array property are returned."),(0,r.kt)("h4",{id:"result-4"},"Result"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"arr"),(0,r.kt)("th",{parentName:"tr",align:"right"},"tail"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},'["one","two","three"]'),(0,r.kt)("td",{parentName:"tr",align:"right"},'["two","three"]')))))}m.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkpostgraph_web=self.webpackChunkpostgraph_web||[]).push([[3226],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),u=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(o.Provider,{value:t},e.children)},d="mdxType",N={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=u(n),c=r,h=d["".concat(o,".").concat(c)]||d[c]||N[c]||l;return n?a.createElement(h,i(i({ref:t},p),{},{components:n})):a.createElement(h,i({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=c;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[d]="string"==typeof e?e:r,i[1]=s;for(var u=2;u<l;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},9644:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>N,frontMatter:()=>l,metadata:()=>s,toc:()=>u});var a=n(7462),r=(n(7294),n(3905));const l={layout:"default",title:"UNWIND",nav_order:6,description:"UNWIND expands a list into a sequence of rows.",toc_max_heading_level:2},i="Unwind",s={unversionedId:"Clauses/UNWIND",id:"Clauses/UNWIND",title:"UNWIND",description:"UNWIND expands a list into a sequence of rows.",source:"@site/docs/03-Clauses/13-UNWIND.md",sourceDirName:"03-Clauses",slug:"/Clauses/UNWIND",permalink:"/docs/Clauses/UNWIND",draft:!1,editUrl:"https://github.com/postgraphdb/postgraphdb.github.io/tree/code/docs/03-Clauses/13-UNWIND.md",tags:[],version:"current",sidebarPosition:13,frontMatter:{layout:"default",title:"UNWIND",nav_order:6,description:"UNWIND expands a list into a sequence of rows.",toc_max_heading_level:2},sidebar:"tutorialSidebar",previous:{title:"SKIP",permalink:"/docs/Clauses/SKIP"},next:{title:"Functions",permalink:"/docs/category/functions"}},o={},u=[{value:"Introduction",id:"introduction",level:2},{value:"Unwinding a list",id:"unwinding-a-list",level:2},{value:"Query",id:"query",level:3},{value:"Result",id:"result",level:3},{value:"Creating a distinct list",id:"creating-a-distinct-list",level:2},{value:"Query",id:"query-1",level:3},{value:"Using UNWIND with any expression returning a list",id:"using-unwind-with-any-expression-returning-a-list",level:2},{value:"Query",id:"query-2",level:3},{value:"Result x",id:"result-x",level:3},{value:"Using UNWIND with a list of lists",id:"using-unwind-with-a-list-of-lists",level:2},{value:"Query",id:"query-3",level:3},{value:"Result",id:"result-1",level:3},{value:"Using UNWIND with an empty list",id:"using-unwind-with-an-empty-list",level:2},{value:"Query",id:"query-4",level:3},{value:"Result",id:"result-2",level:3},{value:"Using UNWIND with an expression that is not a list",id:"using-unwind-with-an-expression-that-is-not-a-list",level:2},{value:"Query",id:"query-5",level:3},{value:"Result",id:"result-3",level:3}],p={toc:u},d="wrapper";function N(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"unwind"},"Unwind"),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"The UNWIND clause makes it possible to transform any list back into individual rows. These lists can be parameters that were passed in, previously collect-ed result, or other list expressions."),(0,r.kt)("p",null,"Common usage of the UNWIND clause:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Create distinct lists."),(0,r.kt)("li",{parentName:"ul"},"Create data from parameter lists that are provided to the query.")),(0,r.kt)("h2",{id:"unwinding-a-list"},"Unwinding a list"),(0,r.kt)("p",null,"We want to transform the literal list into rows named x and return them."),(0,r.kt)("h3",{id:"query"},"Query"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM cypher('merge', $$\n    UNWIND [1, 2, 3, null] AS x\n    RETURN x\n$$) as (x gtype);\n")),(0,r.kt)("p",null,"Each value of the original list\u2009\u2014\u2009including null\u2009\u2014\u2009is returned as an individual row."),(0,r.kt)("h3",{id:"result"},"Result"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"v"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"1")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"2")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"3")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"null")))),(0,r.kt)("h2",{id:"creating-a-distinct-list"},"Creating a distinct list"),(0,r.kt)("p",null,"We want to transform a list of duplicates into a set using DISTINCT."),(0,r.kt)("h3",{id:"query-1"},"Query"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM cypher('merge', $$\n    WITH [1, 1, 2, 2] AS coll\n    UNWIND coll AS x\n    WITH DISTINCT x\n    RETURN collect(x) AS setOfVals\n$$) as (x gtype);\n")),(0,r.kt)("p",null,"Each value of the original list is unwound and passed through DISTINCT to create a unique set."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"setOfVals"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"[1,2]")))),(0,r.kt)("h2",{id:"using-unwind-with-any-expression-returning-a-list"},"Using UNWIND with any expression returning a list"),(0,r.kt)("p",null,"Any expression that returns a list may be used with UNWIND."),(0,r.kt)("h3",{id:"query-2"},"Query"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM cypher('merge', $$\n    WITH\n      [1, 2] AS a,\n      [3, 4] AS b\n    UNWIND (a + b) AS x\n    RETURN x\n$$) as (x gtype);\n")),(0,r.kt)("p",null,"The two lists\u2009\u2014\u2009a and b\u2009\u2014\u2009are concatenated to form a new list, which is then operated upon by UNWIND."),(0,r.kt)("h3",{id:"result-x"},"Result x"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"v"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"1")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"2")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"3")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"4")))),(0,r.kt)("h2",{id:"using-unwind-with-a-list-of-lists"},"Using UNWIND with a list of lists"),(0,r.kt)("p",null,"Multiple UNWIND clauses can be chained to unwind nested list elements."),(0,r.kt)("h3",{id:"query-3"},"Query"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM cypher('merge', $$\n    WITH [[1, 2], [3, 4], 5] AS nested\n    UNWIND nested AS x\n    UNWIND x AS y\n    RETURN y\n$$) as (y gtype);\n")),(0,r.kt)("p",null,"The first UNWIND results in three rows for x, each of which contains an element of the original list (two of which are also lists); namely, ","[1, 2]",", ","[3, 4]",", and 5. The second UNWIND then operates on each of these rows in turn, resulting in five rows for y."),(0,r.kt)("h3",{id:"result-1"},"Result"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"y"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"1")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"2")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"3")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"4")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"5")))),(0,r.kt)("h2",{id:"using-unwind-with-an-empty-list"},"Using UNWIND with an empty list"),(0,r.kt)("p",null,"Using an empty list with UNWIND will produce no rows, irrespective of whether or not any rows existed beforehand, or whether or not other values are being projected."),(0,r.kt)("p",null,"Essentially, UNWIND [] reduces the number of rows to zero, and thus causes the query to cease its execution, returning no results. This has value in cases such as UNWIND v, where v is a variable from an earlier clause that may or may not be an empty list\u2009\u2014\u2009when it is an empty list, this will behave just as a MATCH that has no results."),(0,r.kt)("h3",{id:"query-4"},"Query"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM cypher('merge', $$\nUNWIND [] AS empty\nRETURN 'literal_that_is_not_returned'\n$$) as (a gtype);\n")),(0,r.kt)("h3",{id:"result-2"},"Result"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"a")))),(0,r.kt)("p",null,"To avoid inadvertently using UNWIND on an empty list, CASE may be used to replace an empty list with a null:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM cypher('merge', $$\nWITH [] AS list\n    UNWIND\n      CASE\n        WHEN list = [] THEN [null]\n        ELSE list\n      END AS emptylist\n    RETURN emptylist\n$$) as (emptylist gtype);\n")),(0,r.kt)("h2",{id:"using-unwind-with-an-expression-that-is-not-a-list"},"Using UNWIND with an expression that is not a list"),(0,r.kt)("p",null,"Using UNWIND on an expression that does not return a list, will return the same result as using UNWIND on a list that just contains that expression. As an example, UNWIND 5 is effectively equivalent to UNWIND","[5]",". The exception to this is when the expression returns null\u2009\u2014\u2009this will reduce the number of rows to zero, causing it to cease its execution and return no results."),(0,r.kt)("h3",{id:"query-5"},"Query"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM cypher('merge', $$\n    UNWIND null AS x\n    RETURN x, 'some_literal'\n$$) as (x gtype, y gtype);\n")),(0,r.kt)("h3",{id:"result-3"},"Result"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"x"),(0,r.kt)("th",{parentName:"tr",align:null},"y")))))}N.isMDXComponent=!0}}]);
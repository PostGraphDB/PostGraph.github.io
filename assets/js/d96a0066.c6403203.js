"use strict";(self.webpackChunkpostgraph_web=self.webpackChunkpostgraph_web||[]).push([[5559],{3905:(e,t,l)=>{l.d(t,{Zo:()=>u,kt:()=>g});var a=l(7294);function n(e,t,l){return t in e?Object.defineProperty(e,t,{value:l,enumerable:!0,configurable:!0,writable:!0}):e[t]=l,e}function r(e,t){var l=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),l.push.apply(l,a)}return l}function i(e){for(var t=1;t<arguments.length;t++){var l=null!=arguments[t]?arguments[t]:{};t%2?r(Object(l),!0).forEach((function(t){n(e,t,l[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(l)):r(Object(l)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(l,t))}))}return e}function s(e,t){if(null==e)return{};var l,a,n=function(e,t){if(null==e)return{};var l,a,n={},r=Object.keys(e);for(a=0;a<r.length;a++)l=r[a],t.indexOf(l)>=0||(n[l]=e[l]);return n}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)l=r[a],t.indexOf(l)>=0||Object.prototype.propertyIsEnumerable.call(e,l)&&(n[l]=e[l])}return n}var o=a.createContext({}),d=function(e){var t=a.useContext(o),l=t;return e&&(l="function"==typeof e?e(t):i(i({},t),e)),l},u=function(e){var t=d(e.components);return a.createElement(o.Provider,{value:t},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var l=e.components,n=e.mdxType,r=e.originalType,o=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=d(l),h=n,g=c["".concat(o,".").concat(h)]||c[h]||p[h]||r;return l?a.createElement(g,i(i({ref:t},u),{},{components:l})):a.createElement(g,i({ref:t},u))}));function g(e,t){var l=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=l.length,i=new Array(r);i[0]=h;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[c]="string"==typeof e?e:n,i[1]=s;for(var d=2;d<r;d++)i[d]=l[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,l)}h.displayName="MDXCreateElement"},1121:(e,t,l)=>{l.r(t),l.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>d});var a=l(7462),n=(l(7294),l(3905));const r={layout:"default",title:"MATCH",nav_order:1,description:"Basic Pattern Matching"},i="MATCH Clause",s={unversionedId:"Clauses/MATCH",id:"Clauses/MATCH",title:"MATCH",description:"Basic Pattern Matching",source:"@site/docs/03-Clauses/01-MATCH.md",sourceDirName:"03-Clauses",slug:"/Clauses/MATCH",permalink:"/docs/Clauses/MATCH",draft:!1,editUrl:"https://github.com/postgraphdb/postgraphdb.github.io/tree/code/docs/03-Clauses/01-MATCH.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{layout:"default",title:"MATCH",nav_order:1,description:"Basic Pattern Matching"},sidebar:"tutorialSidebar",previous:{title:"Clauses",permalink:"/docs/category/clauses"},next:{title:"WITH Clause",permalink:"/docs/Clauses/WITH"}},o={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Basic Vertex Finding",id:"basic-vertex-finding",level:2},{value:"Get All Vertices",id:"get-all-vertices",level:3},{value:"Get All Vertices with a Label",id:"get-all-vertices-with-a-label",level:3},{value:"Related Vertices",id:"related-vertices",level:3},{value:"Match with Labels",id:"match-with-labels",level:3},{value:"Edge Basics",id:"edge-basics",level:2},{value:"Outgoing Basics",id:"outgoing-basics",level:3},{value:"Directed Edges and variables",id:"directed-edges-and-variables",level:3},{value:"Match on Edges Label and use a Variable",id:"match-on-edges-label-and-use-a-variable",level:3},{value:"Edges In Depth",id:"edges-in-depth",level:2},{value:"Multiple Edges",id:"multiple-edges",level:3},{value:"Variable Length Edges",id:"variable-length-edges",level:3},{value:"Variables in Variable Length Edges",id:"variables-in-variable-length-edges",level:3},{value:"Match with Properties on a Variable-Length Traversal",id:"match-with-properties-on-a-variable-length-traversal",level:3},{value:"Named Traversals",id:"named-traversals",level:3},{value:"Matching on a Bound Edge",id:"matching-on-a-bound-edge",level:3}],u={toc:d},c="wrapper";function p(e){let{components:t,...l}=e;return(0,n.kt)(c,(0,a.Z)({},u,l,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"match-clause"},"MATCH Clause"),(0,n.kt)("h2",{id:"introduction"},"Introduction"),(0,n.kt)("p",null,"The MATCH clause allows you to specify the patterns Cypher will search for in the graph. This is simplest and easiest primary way of getting data into the current query."),(0,n.kt)("h2",{id:"basic-vertex-finding"},"Basic Vertex Finding"),(0,n.kt)("h3",{id:"get-all-vertices"},"Get All Vertices"),(0,n.kt)("p",null,"By specifying a pattern with a single vertex and no labels and no property constraints, all vertices in the graph will be returned."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM cypher('match', $$\n    MATCH (v)\n    RETURN v\n$$) as (v vertex);\n")),(0,n.kt)("table",null,(0,n.kt)("tr",null," ",(0,n.kt)("th",null,"v")," "),(0,n.kt)("tr",null," ",(0,n.kt)("td",null,'{id: 0, label: "Person", properties {name: "Charlie Sheen" }}')," "),(0,n.kt)("tr",null," ",(0,n.kt)("td",null,'{id: 1, label: "Person", properties {name: "Martin Sheen" }}')," "),(0,n.kt)("tr",null," ",(0,n.kt)("td",null,'{id: 2, label: "Person", properties {name: "Michael Douglas" }}')," "),(0,n.kt)("tr",null," ",(0,n.kt)("td",null,'{id: 3, label: "Person", properties {name: "Oliver Stone" }}')," "),(0,n.kt)("tr",null," ",(0,n.kt)("td",null,'{id: 4, label: "Person", properties {name: "Rob Reiner" }}')," "),(0,n.kt)("tr",null," ",(0,n.kt)("td",null,'{id: 5, label: "Movie", properties {name: "Wall Street" }}')," "),(0,n.kt)("tr",null," ",(0,n.kt)("td",null,'{id: 1, label: "Movie", properties {name: "The American President" }}')," ")),(0,n.kt)("h3",{id:"get-all-vertices-with-a-label"},"Get All Vertices with a Label"),(0,n.kt)("p",null,"Adding a ':' then a label will filter all vertices to only include vertices with that label."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM cypher('match', $$\n    MATCH (movie:Movie)\n    RETURN movie.title\n$$) as (title gtype);\n")),(0,n.kt)("table",null,(0,n.kt)("tr",null," ",(0,n.kt)("th",null,"title")," "),(0,n.kt)("tr",null," ",(0,n.kt)("td",null,'"Wall Street"')," "),(0,n.kt)("tr",null," ",(0,n.kt)("td",null,'"The American President"')," ")),(0,n.kt)("h3",{id:"related-vertices"},"Related Vertices"),(0,n.kt)("p",null,"The '-[]-' means related to, without regard to type or direction of the relationship."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM cypher('match', $$\n    MATCH (director {name : 'Oliver Stone'})-[]-(movie)\n    RETURN movie.title\n$$) as (title gtype);\n")),(0,n.kt)("table",null,(0,n.kt)("tr",null," ",(0,n.kt)("th",null,"title")," "),(0,n.kt)("tr",null," ",(0,n.kt)("td",null,'"Wall Street"')," ")),(0,n.kt)("h3",{id:"match-with-labels"},"Match with Labels"),(0,n.kt)("p",null,"To constrain your traversal with labels on vertices, add it to the pattern vertex, using the label syntax."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM cypher('match', $$\n    MATCH (:Person {name : 'Oliver Stone'})-[]-(movie)\n    RETURN movie.title\n$$) as (title gtype);\n")),(0,n.kt)("table",null,(0,n.kt)("tr",null," ",(0,n.kt)("th",null,"title")," "),(0,n.kt)("tr",null," ",(0,n.kt)("td",null,'"Wall Street"')," ")),(0,n.kt)("h2",{id:"edge-basics"},"Edge Basics"),(0,n.kt)("h3",{id:"outgoing-basics"},"Outgoing Basics"),(0,n.kt)("p",null,"When the direction of an edge is of interest, use '->' or '<-'."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM cypher('match', $$\n    MATCH (:Person {name : 'Oliver Stone'})-[]->(movie)\n    RETURN movie.title\n$$) as (title gtype);\n")),(0,n.kt)("table",null,(0,n.kt)("tr",null," ",(0,n.kt)("th",null,"title")," "),(0,n.kt)("tr",null," ",(0,n.kt)("td",null,'"Wall Street"')," ")),(0,n.kt)("h3",{id:"directed-edges-and-variables"},"Directed Edges and variables"),(0,n.kt)("p",null,"If a variable is required, either for filtering on properties of the edge, or to return the edge, this is how to introduce the variable."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM cypher('match', $$\n    MATCH (:Person {name : 'Oliver Stone'})-[r]->(movie)\n    RETURN type(r)\n$$) as (title gtype);\n")),(0,n.kt)("table",null,(0,n.kt)("tr",null," ",(0,n.kt)("th",null,"title")," "),(0,n.kt)("tr",null," ",(0,n.kt)("td",null,'"DIRECTED"')," ")),(0,n.kt)("h3",{id:"match-on-edges-label-and-use-a-variable"},"Match on Edges Label and use a Variable"),(0,n.kt)("p",null,"If you want to introduce a variable to hold the edge, and specify the edge type you want, add them both."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM cypher('match', $$\n    MATCH (wallstreet {title: 'Wall Street'})-[:ACTED_IN]->(person)\n    RETURN person.name\n$$) as (name gtype);\n")),(0,n.kt)("table",null,(0,n.kt)("tr",null," ",(0,n.kt)("th",null,"name")," "),(0,n.kt)("tr",null," ",(0,n.kt)("td",null,'"Charlie Sheen"')," "),(0,n.kt)("tr",null," ",(0,n.kt)("td",null,'"Martin Sheen"')," "),(0,n.kt)("tr",null," ",(0,n.kt)("td",null,'"Michael Douglas"')," ")),(0,n.kt)("h2",{id:"edges-in-depth"},"Edges In Depth"),(0,n.kt)("h3",{id:"multiple-edges"},"Multiple Edges"),(0,n.kt)("p",null,"Edges can be expressed by using multiple statements in the form of '()-[]-()', or they can be added together."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM cypher('match', $$\n    MATCH (charlie {name: 'Charlie Sheen'})-[:ACTED_IN]->(movie)<-[:DIRECTED]-(director)\n    RETURN person.name\n$$) as (name gtype);\n")),(0,n.kt)("table",null,(0,n.kt)("tr",null," ",(0,n.kt)("th",null,"name")," "),(0,n.kt)("tr",null," ",(0,n.kt)("td",null,'"Oliver Stone"')," ")),(0,n.kt)("h3",{id:"variable-length-edges"},"Variable Length Edges"),(0,n.kt)("p",null,"Vertex that are a variable number of edge->vertex hops away can be found using the syntax '-","[:TYPE*minHops...maxHops]","->'. minHops and maxHops are optional and default to 1 and infinity respectively. When no bounds are given the dots may be omitted. The dots may also be omitted when seeting only one bound and this implies a fixed-length pattern."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM cypher('match', $$\n    MATCH (charlie {name: 'Charlie Sheen'})-[:ACTED_IN*1..3]->(movie:Movie)\n    RETURN movie.title\n$$) as (title gtype);\n")),(0,n.kt)("table",null,(0,n.kt)("tr",null," ",(0,n.kt)("th",null,"title")," "),(0,n.kt)("tr",null," ",(0,n.kt)("td",null,'"Wall Street"')," "),(0,n.kt)("tr",null," ",(0,n.kt)("td",null,'"The American President"')," "),(0,n.kt)("tr",null," ",(0,n.kt)("td",null,'"The American President"')," ")),(0,n.kt)("h3",{id:"variables-in-variable-length-edges"},"Variables in Variable Length Edges"),(0,n.kt)("p",null,"When the connection between two vertices is of variable length, the list of edges comprising the connection can be returned using the following syntax."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM cypher('match', $$\n    MATCH t = (charlie {name: 'Charlie Sheen'})-[:ACTED_IN*2]->(co_actor)\n    RETURN relationships(t)\n$$) as (actors edge[]);\n")),(0,n.kt)("h3",{id:"match-with-properties-on-a-variable-length-traversal"},"Match with Properties on a Variable-Length Traversal"),(0,n.kt)("p",null,"A variable length edge with properties defined on it means all edges in the path must have the property set to the given value."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM cypher('match', $$\n    MATCH t = (charlie:Person)-[* {blocked:false}]->(martin:Person)\n    WHERE charlie.name = 'Charlie Sheen' AND martin.name = 'Martin Sheen'\n    RETURN t\n$$) as (t traversal);\n")),(0,n.kt)("h3",{id:"named-traversals"},"Named Traversals"),(0,n.kt)("p",null,"If you want to return or filter on a path in a pattern, use a named path."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM cypher('match', $$\n    MATCH t = (michael {name:'Michael Douglas'})-[]->()\n    RETURN t\n$$) as (t traversal);\n")),(0,n.kt)("h3",{id:"matching-on-a-bound-edge"},"Matching on a Bound Edge"),(0,n.kt)("p",null,"When your pattern contains a bound edge, and that edge doesn't specify direction, Cypher will match the edge in both directions."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM cypher('match', $$\n    MATCH (a)-[]-(b)\n    RETURN a, b\n$$) as (a vertex, b vertex);\n")))}p.isMDXComponent=!0}}]);
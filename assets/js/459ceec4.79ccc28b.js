"use strict";(self.webpackChunkpostgraph_web=self.webpackChunkpostgraph_web||[]).push([[9925],{3905:(e,r,t)=>{t.d(r,{Zo:()=>g,kt:()=>m});var n=t(7294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=n.createContext({}),d=function(e){var r=n.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},g=function(e){var r=d(e.components);return n.createElement(s.Provider,{value:r},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},u=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,g=l(e,["components","mdxType","originalType","parentName"]),p=d(t),u=a,m=p["".concat(s,".").concat(u)]||p[u]||c[u]||o;return t?n.createElement(m,i(i({ref:r},g),{},{components:t})):n.createElement(m,i({ref:r},g))}));function m(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=u;var l={};for(var s in r)hasOwnProperty.call(r,s)&&(l[s]=r[s]);l.originalType=e,l[p]="string"==typeof e?e:a,i[1]=l;for(var d=2;d<o;d++)i[d]=t[d];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}u.displayName="MDXCreateElement"},2024:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var n=t(7462),a=(t(7294),t(3905));const o={layout:"default",title:"MERGE",nav_order:9,description:"MERGE Clause for PostGraph"},i="Merge Clause",l={unversionedId:"Clauses/MERGE",id:"Clauses/MERGE",title:"MERGE",description:"MERGE Clause for PostGraph",source:"@site/docs/03-Clauses/08-MERGE.md",sourceDirName:"03-Clauses",slug:"/Clauses/MERGE",permalink:"/docs/Clauses/MERGE",draft:!1,editUrl:"https://github.com/postgraphdb/postgraphdb.github.io/tree/code/docs/03-Clauses/08-MERGE.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{layout:"default",title:"MERGE",nav_order:9,description:"MERGE Clause for PostGraph"},sidebar:"tutorialSidebar",previous:{title:"DELETE",permalink:"/docs/Clauses/DELETE"},next:{title:"UNION",permalink:"/docs/Clauses/UNION"}},s={},d=[{value:"Merge Vertices",id:"merge-vertices",level:2},{value:"Merge Vertex with a Label",id:"merge-vertex-with-a-label",level:3},{value:"Merge Vertex with Properties",id:"merge-vertex-with-properties",level:3},{value:"Merge Vertex with a Label and Properties",id:"merge-vertex-with-a-label-and-properties",level:3},{value:"Merge Edges",id:"merge-edges",level:2},{value:"Merge on an Edge",id:"merge-on-an-edge",level:3},{value:"Merge on Multiple Edges",id:"merge-on-multiple-edges",level:3},{value:"Merge on an Undirected Edge",id:"merge-on-an-undirected-edge",level:3},{value:"Merge on an Edge Between Two Vertices",id:"merge-on-an-edge-between-two-vertices",level:3},{value:"Merge on an Edge Between Between an Existing Vertex Derived From a Vertex Property",id:"merge-on-an-edge-between-between-an-existing-vertex-derived-from-a-vertex-property",level:3}],g={toc:d},p="wrapper";function c(e){let{components:r,...t}=e;return(0,a.kt)(p,(0,n.Z)({},g,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"merge-clause"},"Merge Clause"),(0,a.kt)("h2",{id:"merge-vertices"},"Merge Vertices"),(0,a.kt)("h3",{id:"merge-vertex-with-a-label"},"Merge Vertex with a Label"),(0,a.kt)("h3",{id:"merge-vertex-with-properties"},"Merge Vertex with Properties"),(0,a.kt)("h3",{id:"merge-vertex-with-a-label-and-properties"},"Merge Vertex with a Label and Properties"),(0,a.kt)("h2",{id:"merge-edges"},"Merge Edges"),(0,a.kt)("h3",{id:"merge-on-an-edge"},"Merge on an Edge"),(0,a.kt)("h3",{id:"merge-on-multiple-edges"},"Merge on Multiple Edges"),(0,a.kt)("h3",{id:"merge-on-an-undirected-edge"},"Merge on an Undirected Edge"),(0,a.kt)("h3",{id:"merge-on-an-edge-between-two-vertices"},"Merge on an Edge Between Two Vertices"),(0,a.kt)("h3",{id:"merge-on-an-edge-between-between-an-existing-vertex-derived-from-a-vertex-property"},"Merge on an Edge Between Between an Existing Vertex Derived From a Vertex Property"))}c.isMDXComponent=!0}}]);
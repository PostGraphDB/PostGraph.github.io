"use strict";(self.webpackChunkpostgraph_web=self.webpackChunkpostgraph_web||[]).push([[2555],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>g});var l=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,l)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,l,n=function(e,t){if(null==e)return{};var a,l,n={},r=Object.keys(e);for(l=0;l<r.length;l++)a=r[l],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(l=0;l<r.length;l++)a=r[l],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var u=l.createContext({}),p=function(e){var t=l.useContext(u),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},d=function(e){var t=p(e.components);return l.createElement(u.Provider,{value:t},e.children)},o="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},k=l.forwardRef((function(e,t){var a=e.components,n=e.mdxType,r=e.originalType,u=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),o=p(a),k=n,g=o["".concat(u,".").concat(k)]||o[k]||m[k]||r;return a?l.createElement(g,s(s({ref:t},d),{},{components:a})):l.createElement(g,s({ref:t},d))}));function g(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=a.length,s=new Array(r);s[0]=k;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i[o]="string"==typeof e?e:n,s[1]=i;for(var p=2;p<r;p++)s[p]=a[p];return l.createElement.apply(null,s)}return l.createElement.apply(null,a)}k.displayName="MDXCreateElement"},8845:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>m,frontMatter:()=>r,metadata:()=>i,toc:()=>p});var l=a(7462),n=(a(7294),a(3905));const r={layout:"default",title:"List",nav_order:7,description:"List Graph Type for PostGraph",toc_max_heading_level:3},s=void 0,i={unversionedId:"Datatypes/gtype/list",id:"Datatypes/gtype/list",title:"List",description:"List Graph Type for PostGraph",source:"@site/docs/02-Datatypes/05-gtype/07-list.md",sourceDirName:"02-Datatypes/05-gtype",slug:"/Datatypes/gtype/list",permalink:"/docs/Datatypes/gtype/list",draft:!1,editUrl:"https://github.com/postgraphdb/postgraphdb.github.io/tree/code/docs/02-Datatypes/05-gtype/07-list.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{layout:"default",title:"List",nav_order:7,description:"List Graph Type for PostGraph",toc_max_heading_level:3},sidebar:"tutorialSidebar",previous:{title:"Temporal Types",permalink:"/docs/Datatypes/gtype/temporal-types"},next:{title:"Map",permalink:"/docs/Datatypes/gtype/map"}},u={},p=[{value:"Data Setup",id:"data-setup",level:3},{value:"Query",id:"query",level:4},{value:"Basic Usage",id:"basic-usage",level:2},{value:"Query",id:"query-1",level:4},{value:"Result",id:"result",level:4},{value:"Query",id:"query-2",level:4},{value:"Operators",id:"operators",level:2},{value:"Accessing Elements",id:"accessing-elements",level:3},{value:"Query",id:"query-3",level:4},{value:"Result",id:"result-1",level:4},{value:"List range and size",id:"list-range-and-size",level:3},{value:"Query",id:"query-4",level:4},{value:"Result",id:"result-2",level:4},{value:"Query",id:"query-5",level:4},{value:"Result",id:"result-3",level:4},{value:"Slices",id:"slices",level:3},{value:"Query",id:"query-6",level:4},{value:"Result",id:"result-4",level:4},{value:"Query",id:"query-7",level:4},{value:"Result",id:"result-5",level:4},{value:"Query",id:"query-8",level:4},{value:"Result",id:"result-6",level:4},{value:"Query",id:"query-9",level:4},{value:"Result",id:"result-7",level:4},{value:"Out of Bounds Slices",id:"out-of-bounds-slices",level:4},{value:"Query",id:"query-10",level:4},{value:"Result",id:"result-8",level:4},{value:"Query",id:"query-11",level:4},{value:"Result",id:"result-9",level:4},{value:"Query",id:"query-12",level:4},{value:"Result",id:"result-10",level:4},{value:"Functions",id:"functions",level:2},{value:"Range",id:"range",level:3},{value:"Syntax",id:"syntax",level:4},{value:"Returns",id:"returns",level:4},{value:"Arguments",id:"arguments",level:4},{value:"Query",id:"query-13",level:4},{value:"Result",id:"result-11",level:4},{value:"Reverse",id:"reverse",level:3},{value:"Syntax",id:"syntax-1",level:4},{value:"Returns",id:"returns-1",level:4},{value:"Arguments",id:"arguments-1",level:4},{value:"Considerations",id:"considerations",level:4},{value:"Query",id:"query-14",level:4},{value:"Result",id:"result-12",level:4},{value:"Tail",id:"tail",level:3},{value:"Syntax:",id:"syntax-2",level:4},{value:"Returns:",id:"returns-2",level:4},{value:"Arguments:",id:"arguments-2",level:4},{value:"Query",id:"query-15",level:4},{value:"Result",id:"result-13",level:4}],d={toc:p},o="wrapper";function m(e){let{components:t,...a}=e;return(0,n.kt)(o,(0,l.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"GType includes comprehensive support for lists. "),(0,n.kt)("h3",{id:"data-setup"},"Data Setup"),(0,n.kt)("h4",{id:"query"},"Query"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT create_graph('lists');\nSELECT * FROM cypher('lists', $$\nCREATE\n  (alice:Person:Developer {name:'Alice', age: 38, eyes: 'brown'}),\n  (bob {name: 'Bob', age: 25, eyes: 'blue'}),\n  (charlie {name: 'Charlie', age: 53, eyes: 'green'}),\n  (daniel {name: 'Daniel', age: 54, eyes: 'brown'}),\n  (eskil {name: 'Eskil', age: 41, eyes: 'blue', array: ['one', 'two', 'three']}),\n  (alice)-[:KNOWS]->(bob),\n  (alice)-[:KNOWS]->(charlie),\n  (bob)-[:KNOWS]->(daniel),\n  (charlie)-[:KNOWS]->(daniel),\n  (bob)-[:MARRIED]->(eskil)\n$$) as (a gtype);\n")),(0,n.kt)("h2",{id:"basic-usage"},"Basic Usage"),(0,n.kt)("p",null,"A literal list is created by using brackets and separating the elements in the list with commas."),(0,n.kt)("h4",{id:"query-1"},"Query"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM cypher('lists', $$\n    RETURN [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] AS list\n$$) as (list gtype);\n")),(0,n.kt)("h4",{id:"result"},"Result"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"list"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"[0,1,2,3,4,5,6,7,8,9]")))),(0,n.kt)("p",null,"A list can consist of different value types."),(0,n.kt)("h4",{id:"query-2"},"Query"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM cypher('lists', $$\n    RETURN [0, \"hello\", 3.14, null] AS list\n$$) as (list gtype);\n")),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"list"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},'[0, "hello", 3.14, null]')))),(0,n.kt)("h2",{id:"operators"},"Operators"),(0,n.kt)("h3",{id:"accessing-elements"},"Accessing Elements"),(0,n.kt)("p",null,"Lists are indexed by 0. To access individual elements in a list, use square brackets. This extracts from the start index and up to, but not including, the end index."),(0,n.kt)("p",null,"For example:"),(0,n.kt)("h4",{id:"query-3"},"Query"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM cypher('lists', $$\n    WITH [5,1,7] AS list\n    RETURN list[2]\n$$) as (list gtype);\n")),(0,n.kt)("h4",{id:"result-1"},"Result"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"list"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"7")))),(0,n.kt)("h3",{id:"list-range-and-size"},"List range and size"),(0,n.kt)("p",null,"The below examples use the range function to create lists. This function returns a list containing all numbers between given start and end numbers. The range is inclusive in both ends."),(0,n.kt)("h4",{id:"query-4"},"Query"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM cypher('lists', $$\nRETURN range(0, 10)[3] AS element\n$$) as (list gtype);\n")),(0,n.kt)("h4",{id:"result-2"},"Result"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"list"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"3")))),(0,n.kt)("p",null,"It is also possible to use negative numbers, to start from the end of the list instead."),(0,n.kt)("h4",{id:"query-5"},"Query"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM cypher('lists', $$\n    RETURN range(0, 10)[-3] AS element\n$$) as (list gtype);\n")),(0,n.kt)("h4",{id:"result-3"},"Result"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"list"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"8")))),(0,n.kt)("h3",{id:"slices"},"Slices"),(0,n.kt)("p",null,"Finally, it is possible to use ranges inside the brackets to return ranges of the list. The list range operator ([]) is inclusive of the first value, but exclusive of the last value."),(0,n.kt)("h4",{id:"query-6"},"Query"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM cypher('lists', $$\n    RETURN range(0, 10)[0..3] AS list\n$$) as (list gtype);\n")),(0,n.kt)("h4",{id:"result-4"},"Result"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"list"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"[0,1,2]")))),(0,n.kt)("h4",{id:"query-7"},"Query"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM cypher('lists', $$\nRETURN range(0, 10)[0..-5] AS list\n$$) as (list gtype);\n")),(0,n.kt)("h4",{id:"result-5"},"Result"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"list"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"[0,1,2,3,4,5]")))),(0,n.kt)("h4",{id:"query-8"},"Query"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM cypher('lists', $$\nRETURN range(0, 10)[-5..] AS list\n$$) as (list gtype);\n")),(0,n.kt)("h4",{id:"result-6"},"Result"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"list"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"[6,7,8,9,10]")))),(0,n.kt)("h4",{id:"query-9"},"Query"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM cypher('lists', $$\nRETURN range(0, 10)[..4] AS list\n$$) as (list gtype);\n")),(0,n.kt)("h4",{id:"result-7"},"Result"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"list"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"[0,1,2,3]")))),(0,n.kt)("h4",{id:"out-of-bounds-slices"},"Out of Bounds Slices"),(0,n.kt)("p",null,"Out-of-bound slices are simply truncated, but out-of-bound single elements return null."),(0,n.kt)("h4",{id:"query-10"},"Query"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM cypher('lists', $$\nRETURN range(0, 10)[15] AS list\n$$) as (list gtype);\n")),(0,n.kt)("h4",{id:"result-8"},"Result"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"list"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null})))),(0,n.kt)("h4",{id:"query-11"},"Query"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM cypher('lists', $$\n    RETURN range(0, 10)[5..15] AS list\n$$) as (list gtype);\n")),(0,n.kt)("h4",{id:"result-9"},"Result"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"list"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"[5,6,7,8,9,10]")))),(0,n.kt)("p",null,"The size of a list can be obtained as follows:"),(0,n.kt)("h4",{id:"query-12"},"Query"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM cypher('lists', $$\nRETURN size(range(0, 10)[0..3]) AS list\n$$) as (list gtype);\n")),(0,n.kt)("h4",{id:"result-10"},"Result"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:null},"list"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:null},"3")))),(0,n.kt)("h2",{id:"functions"},"Functions"),(0,n.kt)("h3",{id:"range"},"Range"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"range()")," returns a list comprising all integer values within a range bounded by a start value start and end value end, where the difference step between any two consecutive values is constant; i.e. an arithmetic progression. To create ranges with decreasing integer values, use a negative value step. The range is inclusive for non-empty ranges, and the arithmetic progression will therefore always contain start and\u2009\u2014\u2009depending on the values of start, step and end\u2009\u2014\u2009end. The only exception where the range does not contain start are empty ranges. An empty range will be returned if the value step is negative and start - end is positive, or vice versa, e.g. range(0, 5, -1)."),(0,n.kt)("h4",{id:"syntax"},"Syntax"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"range(start, end [, step])")),(0,n.kt)("h4",{id:"returns"},"Returns"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"A list of Integer elements.")),(0,n.kt)("h4",{id:"arguments"},"Arguments"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,n.kt)("th",{parentName:"tr",align:"center"},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"start"),(0,n.kt)("td",{parentName:"tr",align:"center"},"An expression that returns an integer value.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"end"),(0,n.kt)("td",{parentName:"tr",align:"center"},"An expression that returns an integer value.")),(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"step"),(0,n.kt)("td",{parentName:"tr",align:"center"},"A numeric expression defining the difference between any two consecutive values, with a default of 1.")))),(0,n.kt)("h4",{id:"query-13"},"Query"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM cypher('lists', $$\n    RETURN range(0, 10), range(2, 18, 3), range(0, 5, -1)\n$$) as (r1 gtype, r2 gtype, r3 gtype);\n")),(0,n.kt)("p",null,"Three lists of numbers in the given ranges are returned."),(0,n.kt)("h4",{id:"result-11"},"Result"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"r1"),(0,n.kt)("th",{parentName:"tr",align:"center"},"r2"),(0,n.kt)("th",{parentName:"tr",align:"left"},"r3"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"[0,1,2,3,4,5,6,7,8,9,10]"),(0,n.kt)("td",{parentName:"tr",align:"center"},"[2,5,8,11,14,17]"),(0,n.kt)("td",{parentName:"tr",align:"left"},"[]")))),(0,n.kt)("h3",{id:"reverse"},"Reverse"),(0,n.kt)("p",null,"reverse() returns a list in which the order of all elements in the original list have been reversed."),(0,n.kt)("h4",{id:"syntax-1"},"Syntax"),(0,n.kt)("p",null,"reverse(original)"),(0,n.kt)("h4",{id:"returns-1"},"Returns"),(0,n.kt)("p",null,"A list containing homogeneous or heterogeneous elements; the types of the elements are determined by the elements within original."),(0,n.kt)("h4",{id:"arguments-1"},"Arguments"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,n.kt)("th",{parentName:"tr",align:"center"},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"list"),(0,n.kt)("td",{parentName:"tr",align:"center"},"An expression that returns a list.")))),(0,n.kt)("h4",{id:"considerations"},"Considerations"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Any null element in original is preserved.")),(0,n.kt)("h4",{id:"query-14"},"Query"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM cypher('lists', $$\n    WITH [4923,'abc',521, null, 487] AS ids\n    RETURN reverse(ids)\n$$) as (ids gtype);\n")),(0,n.kt)("h4",{id:"result-12"},"Result"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"labels"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},'[487, null, 521, "abc", 4923]')))),(0,n.kt)("h3",{id:"tail"},"Tail"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"tail()")," returns a list containing all the elements, excluding the first one, from the argument list."),(0,n.kt)("h4",{id:"syntax-2"},"Syntax:"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"tail(list)")),(0,n.kt)("h4",{id:"returns-2"},"Returns:"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"A list containing heterogeneous elements; the types of the elements are determined by the elements in list.")),(0,n.kt)("h4",{id:"arguments-2"},"Arguments:"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,n.kt)("th",{parentName:"tr",align:"center"},"Description"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},"list"),(0,n.kt)("td",{parentName:"tr",align:"center"},"An expression that returns a list.")))),(0,n.kt)("h4",{id:"query-15"},"Query"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM cypher('lists', $$\n    MATCH (a)\n    WHERE a.name = 'Eskil'\n    RETURN a.array, tail(a.array)\n$$) as (arr gtype, tail gtype);\n")),(0,n.kt)("p",null,"The property named array and a list comprising all but the first element of the array property are returned."),(0,n.kt)("h4",{id:"result-13"},"Result"),(0,n.kt)("table",null,(0,n.kt)("thead",{parentName:"table"},(0,n.kt)("tr",{parentName:"thead"},(0,n.kt)("th",{parentName:"tr",align:"left"},"arr"),(0,n.kt)("th",{parentName:"tr",align:"right"},"tail"))),(0,n.kt)("tbody",{parentName:"table"},(0,n.kt)("tr",{parentName:"tbody"},(0,n.kt)("td",{parentName:"tr",align:"left"},'["one","two","three"]'),(0,n.kt)("td",{parentName:"tr",align:"right"},'["two","three"]')))))}m.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkpostgraph_web=self.webpackChunkpostgraph_web||[]).push([[3465],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>y});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var p=a.createContext({}),s=function(e){var t=a.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},f=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=s(r),f=n,y=u["".concat(p,".").concat(f)]||u[f]||d[f]||o;return r?a.createElement(y,i(i({ref:t},c),{},{components:r})):a.createElement(y,i({ref:t},c))}));function y(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,i=new Array(o);i[0]=f;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[u]="string"==typeof e?e:n,i[1]=l;for(var s=2;s<o;s++)i[s]=r[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}f.displayName="MDXCreateElement"},6746:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var a=r(7462),n=(r(7294),r(3905));const o={layout:"default",title:"Vertex",nav_order:1,description:"Vertex Datatype for PostGraph"},i="Vertex",l={unversionedId:"Datatypes/vertex",id:"Datatypes/vertex",title:"Vertex",description:"Vertex Datatype for PostGraph",source:"@site/docs/02-Datatypes/01-vertex.md",sourceDirName:"02-Datatypes",slug:"/Datatypes/vertex",permalink:"/docs/Datatypes/vertex",draft:!1,editUrl:"https://github.com/postgraphdb/postgraphdb.github.io/tree/code/docs/02-Datatypes/01-vertex.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{layout:"default",title:"Vertex",nav_order:1,description:"Vertex Datatype for PostGraph"},sidebar:"tutorialSidebar",previous:{title:"Docker",permalink:"/docs/Installation/docker"},next:{title:"Edges",permalink:"/docs/Datatypes/edge"}},p={},s=[{value:"id",id:"id",level:3},{value:"label",id:"label",level:3},{value:"properties",id:"properties",level:3}],c={toc:s},u="wrapper";function d(e){let{components:t,...r}=e;return(0,n.kt)(u,(0,a.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"vertex"},"Vertex"),(0,n.kt)("p",null,"Vertices are one of the two basic units in a graph."),(0,n.kt)("p",null,"In Postgraph, Vertices consist of:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"an id"),(0,n.kt)("li",{parentName:"ul"},"a label"),(0,n.kt)("li",{parentName:"ul"},"a map of properties")),(0,n.kt)("h3",{id:"id"},"id"),(0,n.kt)("p",null,"The id is a 64-byte number that is the unique identifier of the vertex in the graph the vertex is associated with."),(0,n.kt)("h3",{id:"label"},"label"),(0,n.kt)("p",null,"The label is a string that categorizes the edge. Vertices are not required to have a label."),(0,n.kt)("h3",{id:"properties"},"properties"),(0,n.kt)("p",null,"Properties are a map that contains all the data associated with the edge."))}d.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkpostgraph_web=self.webpackChunkpostgraph_web||[]).push([[7621],{3905:(e,t,r)=>{r.d(t,{Zo:()=>o,kt:()=>y});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function u(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),s=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):u(u({},t),e)),r},o=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,l=e.originalType,p=e.parentName,o=i(e,["components","mdxType","originalType","parentName"]),d=s(r),c=a,y=d["".concat(p,".").concat(c)]||d[c]||m[c]||l;return r?n.createElement(y,u(u({ref:t},o),{},{components:r})):n.createElement(y,u({ref:t},o))}));function y(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=r.length,u=new Array(l);u[0]=c;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[d]="string"==typeof e?e:a,u[1]=i;for(var s=2;s<l;s++)u[s]=r[s];return n.createElement.apply(null,u)}return n.createElement.apply(null,r)}c.displayName="MDXCreateElement"},1813:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>u,default:()=>m,frontMatter:()=>l,metadata:()=>i,toc:()=>s});var n=r(7462),a=(r(7294),r(3905));const l={layout:"default",title:"RETURN",nav_order:4,description:"RETURN Clause for PostGraph"},u="RETURN Clause",i={unversionedId:"Clauses/RETURN",id:"Clauses/RETURN",title:"RETURN",description:"RETURN Clause for PostGraph",source:"@site/docs/03-Clauses/03-RETURN.md",sourceDirName:"03-Clauses",slug:"/Clauses/RETURN",permalink:"/docs/Clauses/RETURN",draft:!1,editUrl:"https://github.com/postgraphdb/postgraphdb.github.io/tree/code/docs/03-Clauses/03-RETURN.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{layout:"default",title:"RETURN",nav_order:4,description:"RETURN Clause for PostGraph"},sidebar:"tutorialSidebar",previous:{title:"MATCH",permalink:"/docs/Clauses/MATCH"},next:{title:"CREATE",permalink:"/docs/Clauses/CREATE"}},p={},s=[{value:"Return vertices",id:"return-vertices",level:2},{value:"Query",id:"query",level:3},{value:"Result",id:"result",level:3},{value:"Return edges",id:"return-edges",level:2},{value:"Query",id:"query-1",level:3},{value:"Result",id:"result-1",level:3},{value:"Return property",id:"return-property",level:3},{value:"Query",id:"query-2",level:4},{value:"Result",id:"result-2",level:4},{value:"Return all elements",id:"return-all-elements",level:3},{value:"Query",id:"query-3",level:4},{value:"Result",id:"result-3",level:4},{value:"Optional properties",id:"optional-properties",level:3},{value:"Query",id:"query-4",level:4},{value:"Result",id:"result-4",level:4},{value:"Unique results",id:"unique-results",level:3},{value:"Query",id:"query-5",level:4},{value:"Result",id:"result-5",level:4}],o={toc:s},d="wrapper";function m(e){let{components:t,...r}=e;return(0,a.kt)(d,(0,n.Z)({},o,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"return-clause"},"RETURN Clause"),(0,a.kt)("h2",{id:"return-vertices"},"Return vertices"),(0,a.kt)("p",null,"To return a vertex, list it in the RETURN clause:"),(0,a.kt)("h3",{id:"query"},"Query"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM cypher('return', $$\n    MATCH (p:Person {name: 'Keanu Reeves'})\n    RETURN p\n$$) as (p gtype);\n")),(0,a.kt)("h3",{id:"result"},"Result"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"p"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"{",' id: 0, label: "Person", properties: ',"{",' "bornIn": "Beirut", "nationality": "Canadian", "name": "Keanu Reeves" ',"}"," ","}")))),(0,a.kt)("h2",{id:"return-edges"},"Return edges"),(0,a.kt)("p",null,"To return a edge type, list it in the RETURN clause:"),(0,a.kt)("h3",{id:"query-1"},"Query"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM cypher('return', $$\n    MATCH (p:Person {name: 'Keanu Reeves'})-[r:ACTED_IN]->(m)\n    RETURN type(r)\n$$) as (type gtype);\n")),(0,a.kt)("p",null,"Table 2. "),(0,a.kt)("h3",{id:"result-1"},"Result"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"type"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},'"ACTED_IN"')))),(0,a.kt)("h3",{id:"return-property"},"Return property"),(0,a.kt)("p",null,"To return a specific property, use the dot separator:"),(0,a.kt)("h4",{id:"query-2"},"Query"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM cypher('return', $$\n    MATCH (p:Person {name: 'Keanu Reeves'})\n    RETURN p.bornIn\n$$) as (m gtype);\n")),(0,a.kt)("h4",{id:"result-2"},"Result"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"bornIn"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},'"Beirut"')))),(0,a.kt)("p",null,"To only return the value of a property, do not not return the full vertex/edge. This will improve performance."),(0,a.kt)("h3",{id:"return-all-elements"},"Return all elements"),(0,a.kt)("p",null,"To return all vertices, edges and paths found in a query, use the * symbol:"),(0,a.kt)("h4",{id:"query-3"},"Query"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM cypher('return', $$\n    MATCH p = (keanu:Person {name: 'Keanu Reeves'})-[r]->(m)\n    RETURN *\n$$) as (m gtype);\n")),(0,a.kt)("p",null,"This returns the two vertices, and the two possible paths between them."),(0,a.kt)("h4",{id:"result-3"},"Result"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"m"),(0,a.kt)("th",{parentName:"tr",align:null},"p"),(0,a.kt)("th",{parentName:"tr",align:null},"r"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"{",' id: 1, label: "Movie", properties: ',"{",' "title":"Man of Tai Chi", "released":2013 ',"}"," ","}"),(0,a.kt)("td",{parentName:"tr",align:null},"{",' id: 0, label: "Person", properties: ',"{",' "bornIn": "Beirut", "nationality": "Canadian", "name": "Keanu Reeves" ',"}"," ","}",", ","{",' id: 2, startid: 0, endid: 1, label: "ACTED_IN", properties: ',"{"," ","}"," ","}",", ","{",' id: 1, label: "Movie", properties: ',"{",' "title":"Man of Tai Chi", "released":2013 ',"}"," ","}"),(0,a.kt)("td",{parentName:"tr",align:null},"{",' id: 2, startid: 0, endid: 1, label: "ACTED_IN", properties: ',"{"," ","}"," ","}")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"{",' id: 1, label: "Movie", properties: ',"{",' "title":"Man of Tai Chi", "released":2013 ',"}"," ","}"),(0,a.kt)("td",{parentName:"tr",align:null},"{",' id: 0, label: "Person", properties: ',"{",' "bornIn": "Beirut", "nationality": "Canadian", "name": "Keanu Reeves" ',"}"," ","}",", ","{",' id: 3, startid: 0, endid: 1, label: "DIRECTED", properties: ',"{"," ","}"," ","}",", ","{",'id: 1, label: "Movie", properties: ',"{",' "title":"Man of Tai Chi", "released":2013 ',"}"," ","}"),(0,a.kt)("td",{parentName:"tr",align:null},"{",' id: 3, startid: 0, endid: 1, label: "DIRECTED", properties: ',"{"," ","}"," ","}")))),(0,a.kt)("h3",{id:"optional-properties"},"Optional properties"),(0,a.kt)("p",null,"If the existence of a property is unknown, it can still be included in a RETURN clause. It will be treated as null if it is missing."),(0,a.kt)("h4",{id:"query-4"},"Query"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM cypher('return', $$\n    MATCH (n)\n    RETURN n.bornIn\n$$) as (bornIn gtype);\n")),(0,a.kt)("p",null,"This example returns the bornIn properties for vertices that has that property, and null for those vertices missing the property."),(0,a.kt)("h4",{id:"result-4"},"Result"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"bornIn"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},'"Beirut"')),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"null")))),(0,a.kt)("h3",{id:"unique-results"},"Unique results"),(0,a.kt)("p",null,"DISTINCT retrieves only unique rows for the columns that have been selected for output."),(0,a.kt)("h4",{id:"query-5"},"Query"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM cypher('return', $$\n    MATCH (p:Person {name: 'Keanu Reeves'})--\x3e(m)\n    RETURN DISTINCT m\n$$) as (m gtype);\n")),(0,a.kt)("p",null,"The Movie vertex 'Man of Tai Chi' is returned by the query, but only once (without the DISTINCT operator it would have been returned twice because there are two edges going to it from 'Keanu Reeves'):"),(0,a.kt)("h4",{id:"result-5"},"Result"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"m"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"{",'id: 0, label: "Person", properties: ',"{",'"title":"Man of Tai Chi", "released":2013 ',"}","}")))))}m.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkpostgraph_web=self.webpackChunkpostgraph_web||[]).push([[7615],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=u(n),h=r,m=d["".concat(s,".").concat(h)]||d[h]||c[h]||l;return n?a.createElement(m,i(i({ref:t},p),{},{components:n})):a.createElement(m,i({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=h;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[d]="string"==typeof e?e:r,i[1]=o;for(var u=2;u<l;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},5718:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>l,metadata:()=>o,toc:()=>u});var a=n(7462),r=(n(7294),n(3905));const l={layout:"default",title:"GType Vector",nav_order:8,description:"Vectors for PostGraph",keywords:["vector","AI","machine learning","graph embeddings","k nearest neighbor","pgvector"],toc_max_heading_level:2},i="Vector",o={unversionedId:"Datatypes/gtype/vector",id:"Datatypes/gtype/vector",title:"GType Vector",description:"Vectors for PostGraph",source:"@site/docs/02-Datatypes/05-gtype/09-vector.md",sourceDirName:"02-Datatypes/05-gtype",slug:"/Datatypes/gtype/vector",permalink:"/docs/Datatypes/gtype/vector",draft:!1,editUrl:"https://github.com/postgraphdb/postgraphdb.github.io/tree/code/docs/02-Datatypes/05-gtype/09-vector.md",tags:[],version:"current",sidebarPosition:9,frontMatter:{layout:"default",title:"GType Vector",nav_order:8,description:"Vectors for PostGraph",keywords:["vector","AI","machine learning","graph embeddings","k nearest neighbor","pgvector"],toc_max_heading_level:2},sidebar:"tutorialSidebar",previous:{title:"Map",permalink:"/docs/Datatypes/gtype/map"},next:{title:"GType",permalink:"/docs/Datatypes/gtype"}},s={},u=[{value:"What is a Vector",id:"what-is-a-vector",level:2},{value:"Creating Vectors",id:"creating-vectors",level:2},{value:"Typecast from a string",id:"typecast-from-a-string",level:3},{value:"Query",id:"query",level:4},{value:"Result",id:"result",level:4},{value:"Vector Functions",id:"vector-functions",level:2},{value:"&lt;-&gt; Operator - L2 (Euclidean) Distance",id:"--operator---l2-euclidean-distance",level:3},{value:"Syntax",id:"syntax",level:4},{value:"Returns",id:"returns",level:4},{value:"Arguments",id:"arguments",level:4},{value:"Considerations",id:"considerations",level:4},{value:"Example &lt;-&gt;",id:"example--",level:4},{value:"Query",id:"query-1",level:5},{value:"Result",id:"result-1",level:5},{value:"&lt;=&gt; Operator - Cosine Distance",id:"-operator---cosine-distance",level:3},{value:"Syntax",id:"syntax-1",level:4},{value:"Returns",id:"returns-1",level:4},{value:"Arguments",id:"arguments-1",level:4},{value:"Considerations",id:"considerations-1",level:4},{value:"Example &lt;=&gt;",id:"example-",level:4},{value:"Query",id:"query-2",level:5},{value:"Result",id:"result-2",level:5},{value:"L1 (Manhattan) Distance",id:"l1-manhattan-distance",level:3},{value:"Syntax",id:"syntax-2",level:4},{value:"Returns",id:"returns-2",level:4},{value:"Arguments",id:"arguments-2",level:4},{value:"Considerations",id:"considerations-2",level:4},{value:"Example L1 Distance",id:"example-l1-distance",level:4},{value:"Query",id:"query-3",level:5},{value:"Result",id:"result-3",level:5},{value:"Spherical Distance",id:"spherical-distance",level:3},{value:"Syntax",id:"syntax-3",level:4},{value:"Returns",id:"returns-3",level:4},{value:"Arguments",id:"arguments-3",level:4},{value:"Considerations",id:"considerations-3",level:4},{value:"Example L1 Distance",id:"example-l1-distance-1",level:4},{value:"Query",id:"query-4",level:5},{value:"Result",id:"result-4",level:5},{value:"Inner Product",id:"inner-product",level:3},{value:"Syntax",id:"syntax-4",level:4},{value:"Returns",id:"returns-4",level:4},{value:"Arguments",id:"arguments-4",level:4},{value:"Considerations",id:"considerations-4",level:4},{value:"Example Inner Product",id:"example-inner-product",level:4},{value:"Query",id:"query-5",level:5},{value:"Result",id:"result-5",level:5},{value:"Negative Inner Product",id:"negative-inner-product",level:3},{value:"Syntax",id:"syntax-5",level:4},{value:"Returns",id:"returns-5",level:4},{value:"Arguments",id:"arguments-5",level:4},{value:"Considerations",id:"considerations-5",level:4},{value:"Example Negative Inner Product",id:"example-negative-inner-product",level:4},{value:"Query",id:"query-6",level:5},{value:"Result",id:"result-6",level:5}],p={toc:u},d="wrapper";function c(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"vector"},"Vector"),(0,r.kt)("p",null,"Vectors are a set of between 1 and 16000 elements double floating point numbers. "),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"The vector datatype uses the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/pgvector/pgvector"},"pgvector")," as its base. The source code for ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/pgvector/pgvector"},"pgvector")," has been merged with PostGraph for this type. Currently, ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/pgvector/pgvector"},"pgvector")," does have more functionality than is in PostGraph and the PostGraph developers strongly recommend researching both projects before making a decision on which extension to use. Currently they are incompatible and you will not be able to move data between the two extensions.")),(0,r.kt)("h2",{id:"what-is-a-vector"},"What is a Vector"),(0,r.kt)("p",null,"Each vector takes 8 * dimensions + 24 bytes of storage. Each element is a double precision floating-point number (like the float8 type in Postgres and float in PostGraph), and all elements must be finite (no NaN, Infinity or -Infinity). Vectors can have up to 16,000 dimensions. "),(0,r.kt)("h2",{id:"creating-vectors"},"Creating Vectors"),(0,r.kt)("p",null,"Currently, there is only one way to create a vector. More a planned, however if you have a certain method you would like to see, please create an issue on github for the feature."),(0,r.kt)("h3",{id:"typecast-from-a-string"},"Typecast from a string"),(0,r.kt)("p",null,"To create a vector you must write the vector as a string an typecast the string to a vector."),(0,r.kt)("h4",{id:"query"},"Query"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM cypher('match', $$\n    RETURN '[1.0]'::vector\n$$) as (v gtype);\n")),(0,r.kt)("h4",{id:"result"},"Result"),(0,r.kt)("table",null,(0,r.kt)("tr",null," ",(0,r.kt)("th",null,"v")," "),(0,r.kt)("tr",null," ",(0,r.kt)("td",null,"[1.0]")," ")),(0,r.kt)("h2",{id:"vector-functions"},"Vector Functions"),(0,r.kt)("h3",{id:"--operator---l2-euclidean-distance"},"<-> Operator - L2 (Euclidean) Distance"),(0,r.kt)("p",null,"The Euclidean distance between two points in ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Euclidean_space"},"Euclidean space")," is the length of a line segment between the two points. It can be calculated from the ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Cartesian_coordinate_system"},"Cartesian coordinates")," of the points using the ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Pythagorean_theorem"},"Pythagorean theorem"),"."),(0,r.kt)("h4",{id:"syntax"},"Syntax"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expression1 <-> expression2")),(0,r.kt)("h4",{id:"returns"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"A float value")),(0,r.kt)("h4",{id:"arguments"},"Arguments"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"expression1"),(0,r.kt)("td",{parentName:"tr",align:"center"},"An expression that evaluates to a vector.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"expression2"),(0,r.kt)("td",{parentName:"tr",align:"center"},"An expression that evaluates to a vector.")))),(0,r.kt)("h4",{id:"considerations"},"Considerations"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"When one of the two arguments is null, null will be returned."),(0,r.kt)("li",{parentName:"ul"},"If the two vectors are not the same dimension, an error will be thrown   ")),(0,r.kt)("h4",{id:"example--"},"Example <->"),(0,r.kt)("h5",{id:"query-1"},"Query"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * from cypher('vector', $$\n    RETURN '[5.0, 2, 4, .324]'::vector <-> '[1.0, 9, 2, .9]'::vector\n$$) as (distance gtype);\n")),(0,r.kt)("h5",{id:"result-1"},"Result"),(0,r.kt)("table",null,(0,r.kt)("tr",null," ",(0,r.kt)("th",null,"distance")," "),(0,r.kt)("tr",null," ",(0,r.kt)("td",null,"8.32657048249758")," ")),(0,r.kt)("h3",{id:"-operator---cosine-distance"},"<=> Operator - Cosine Distance"),(0,r.kt)("p",null,"Gives the angular cosine distance between vectors."),(0,r.kt)("h4",{id:"syntax-1"},"Syntax"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"expression1 <=> expression2")),(0,r.kt)("h4",{id:"returns-1"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"A float value")),(0,r.kt)("h4",{id:"arguments-1"},"Arguments"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"expression1"),(0,r.kt)("td",{parentName:"tr",align:"center"},"An expression that evaluates to a vector.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"expression2"),(0,r.kt)("td",{parentName:"tr",align:"center"},"An expression that evaluates to a vector.")))),(0,r.kt)("h4",{id:"considerations-1"},"Considerations"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"When one of the two arguments is null, null will be returned."),(0,r.kt)("li",{parentName:"ul"},"If the two vectors are not the same dimension, an error will be thrown")),(0,r.kt)("h4",{id:"example-"},"Example <=>"),(0,r.kt)("h5",{id:"query-2"},"Query"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * from cypher('vector', $$\n    RETURN '[5.0, 2, 4, .324]'::vector <=> '[1.0, 9, 2, .9]'::vector\n$$) as (cosine_distance gtype);\n")),(0,r.kt)("h5",{id:"result-2"},"Result"),(0,r.kt)("table",null,(0,r.kt)("tr",null," ",(0,r.kt)("th",null,"cosine_distance")," "),(0,r.kt)("tr",null," ",(0,r.kt)("td",null,"0.499930158237086")," ")),(0,r.kt)("h3",{id:"l1-manhattan-distance"},"L1 (Manhattan) Distance"),(0,r.kt)("p",null,"An L1 Distance is a  distance function where the distance between two points is the sum of the absolute differences of their Cartesian coordinates."),(0,r.kt)("h4",{id:"syntax-2"},"Syntax"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"l1_distance(expression1, expression2)")),(0,r.kt)("h4",{id:"returns-2"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"A float value")),(0,r.kt)("h4",{id:"arguments-2"},"Arguments"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"expression1"),(0,r.kt)("td",{parentName:"tr",align:"center"},"An expression that evaluates to a vector.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"expression2"),(0,r.kt)("td",{parentName:"tr",align:"center"},"An expression that evaluates to a vector.")))),(0,r.kt)("h4",{id:"considerations-2"},"Considerations"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"When one of the two arguments is null, null will be returned."),(0,r.kt)("li",{parentName:"ul"},"If the two vectors are not the same dimension, an error will be thrown")),(0,r.kt)("h4",{id:"example-l1-distance"},"Example L1 Distance"),(0,r.kt)("h5",{id:"query-3"},"Query"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * from cypher('vector', $$\n    RETURN l1_distance('[5.0, 2, 4, .324]'::vector, '[1.0, 9, 2, .9]'::vector)\n$$) as (l1_distance gtype);\n")),(0,r.kt)("h5",{id:"result-3"},"Result"),(0,r.kt)("table",null,(0,r.kt)("tr",null," ",(0,r.kt)("th",null,"l1_distance")," "),(0,r.kt)("tr",null," ",(0,r.kt)("td",null,"13.576")," ")),(0,r.kt)("h3",{id:"spherical-distance"},"Spherical Distance"),(0,r.kt)("p",null,"The spherical distance between two points P and Q on a sphere is the distance of the shortest path along the surface of the sphere (paths that cut through the interior of the sphere are not allowed) from P to Q, which always lies along a great circle. "),(0,r.kt)("h4",{id:"syntax-3"},"Syntax"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"spherical_distance(expression1, expression2)")),(0,r.kt)("h4",{id:"returns-3"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"A float value")),(0,r.kt)("h4",{id:"arguments-3"},"Arguments"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"expression1"),(0,r.kt)("td",{parentName:"tr",align:"center"},"An expression that evaluates to a vector.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"expression2"),(0,r.kt)("td",{parentName:"tr",align:"center"},"An expression that evaluates to a vector.")))),(0,r.kt)("h4",{id:"considerations-3"},"Considerations"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"When one of the two arguments is null, null will be returned."),(0,r.kt)("li",{parentName:"ul"},"If the two vectors are not the same dimension, an error will be thrown")),(0,r.kt)("h4",{id:"example-l1-distance-1"},"Example L1 Distance"),(0,r.kt)("h5",{id:"query-4"},"Query"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * from cypher('vector', $$\n    RETURN spherical_distance('[5.0, 2, 4, .324]'::vector, '[1.0, 9, 2, .9]'::vector)\n$$) as (spherical_distance gtype);\n")),(0,r.kt)("h5",{id:"result-4"},"Result"),(0,r.kt)("table",null,(0,r.kt)("tr",null," ",(0,r.kt)("th",null,"spherical_distance")," "),(0,r.kt)("tr",null," ",(0,r.kt)("td",null,"13.576")," ")),(0,r.kt)("h3",{id:"inner-product"},"Inner Product"),(0,r.kt)("p",null,"The inner product is the sum of the products of the corresponding entries of the two vectors."),(0,r.kt)("h4",{id:"syntax-4"},"Syntax"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"inner_product(expression1, expression2)")),(0,r.kt)("h4",{id:"returns-4"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"A float value")),(0,r.kt)("h4",{id:"arguments-4"},"Arguments"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"expression1"),(0,r.kt)("td",{parentName:"tr",align:"center"},"An expression that evaluates to a vector.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"expression2"),(0,r.kt)("td",{parentName:"tr",align:"center"},"An expression that evaluates to a vector.")))),(0,r.kt)("h4",{id:"considerations-4"},"Considerations"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"When one of the two arguments is null, null will be returned."),(0,r.kt)("li",{parentName:"ul"},"If the two vectors are not the same dimension, an error will be thrown")),(0,r.kt)("h4",{id:"example-inner-product"},"Example Inner Product"),(0,r.kt)("h5",{id:"query-5"},"Query"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * from cypher('vector', $$\n    RETURN inner_product('[5.0, 2, 4, .324]'::vector, '[1.0, 9, 2, .9]'::vector)\n$$) as (product gtype);\n")),(0,r.kt)("h5",{id:"result-5"},"Result"),(0,r.kt)("table",null,(0,r.kt)("tr",null," ",(0,r.kt)("th",null,"product")," "),(0,r.kt)("tr",null," ",(0,r.kt)("td",null,"31.2916")," ")),(0,r.kt)("h3",{id:"negative-inner-product"},"Negative Inner Product"),(0,r.kt)("p",null,"The negative inner product is the negative sum of the products of the corresponding entries of the two vectors."),(0,r.kt)("h4",{id:"syntax-5"},"Syntax"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"inner_product(expression1, expression2)")),(0,r.kt)("h4",{id:"returns-5"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"A float value")),(0,r.kt)("h4",{id:"arguments-5"},"Arguments"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"expression1"),(0,r.kt)("td",{parentName:"tr",align:"center"},"An expression that evaluates to a vector.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"expression2"),(0,r.kt)("td",{parentName:"tr",align:"center"},"An expression that evaluates to a vector.")))),(0,r.kt)("h4",{id:"considerations-5"},"Considerations"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"When one of the two arguments is null, null will be returned."),(0,r.kt)("li",{parentName:"ul"},"If the two vectors are not the same dimension, an error will be thrown")),(0,r.kt)("h4",{id:"example-negative-inner-product"},"Example Negative Inner Product"),(0,r.kt)("h5",{id:"query-6"},"Query"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * from cypher('vector', $$\n    RETURN negative_inner_product('[5.0, 2, 4, .324]'::vector, '[1.0, 9, 2, .9]'::vector)\n$$) as (product gtype);\n")),(0,r.kt)("h5",{id:"result-6"},"Result"),(0,r.kt)("table",null,(0,r.kt)("tr",null," ",(0,r.kt)("th",null,"product")," "),(0,r.kt)("tr",null," ",(0,r.kt)("td",null,"-31.2916")," ")))}c.isMDXComponent=!0}}]);
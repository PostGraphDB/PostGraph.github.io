"use strict";(self.webpackChunkpostgraph_web=self.webpackChunkpostgraph_web||[]).push([[2110],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>k});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),u=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(o.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=u(n),m=r,k=d["".concat(o,".").concat(m)]||d[m]||c[m]||l;return n?a.createElement(k,i(i({ref:t},p),{},{components:n})):a.createElement(k,i({ref:t},p))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=m;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[d]="string"==typeof e?e:r,i[1]=s;for(var u=2;u<l;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9479:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>c,frontMatter:()=>l,metadata:()=>s,toc:()=>u});var a=n(7462),r=(n(7294),n(3905));const l={layout:"default",title:"List Functions",nav_order:3,description:"List functions return lists of things\u2009\u2014\u2009nodes in a path, and so on."},i="Lists",s={unversionedId:"Functions/list-functions",id:"Functions/list-functions",title:"List Functions",description:"List functions return lists of things\u2009\u2014\u2009nodes in a path, and so on.",source:"@site/docs/04-Functions/03-list-functions.md",sourceDirName:"04-Functions",slug:"/Functions/list-functions",permalink:"/docs/Functions/list-functions",draft:!1,editUrl:"https://github.com/postgraphdb/postgraphdb.github.io/tree/code/docs/04-Functions/03-list-functions.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{layout:"default",title:"List Functions",nav_order:3,description:"List functions return lists of things\u2009\u2014\u2009nodes in a path, and so on."},sidebar:"tutorialSidebar",previous:{title:"Scaler Functions",permalink:"/docs/Functions/scaler-functions"},next:{title:"Numeric Functions",permalink:"/docs/Functions/numeric-functions"}},o={},u=[{value:"Head()",id:"head",level:2},{value:"Keys()",id:"keys",level:2},{value:"Syntax",id:"syntax",level:3},{value:"Returns",id:"returns",level:3},{value:"Arguments",id:"arguments",level:3},{value:"Considerations",id:"considerations",level:3},{value:"Example 1. keys()",id:"example-1-keys",level:3},{value:"Query",id:"query",level:4},{value:"Result",id:"result",level:4},{value:"Labels()",id:"labels",level:2},{value:"Syntax",id:"syntax-1",level:3},{value:"Returns",id:"returns-1",level:3},{value:"Arguments",id:"arguments-1",level:3},{value:"Considerations",id:"considerations-1",level:3},{value:"Example 1. labels()",id:"example-1-labels",level:3},{value:"Query",id:"query-1",level:4},{value:"Result",id:"result-1",level:3},{value:"Nodes()",id:"nodes",level:2},{value:"Relationships()",id:"relationships",level:2}],p={toc:u},d="wrapper";function c(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"lists"},"Lists"),(0,r.kt)("h1",{id:"data-setup"},"Data Setup"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT create_graph('lists');\n\nSELECT * FROM cypher('lists', $$\nCREATE\n  (alice:Person:Developer {name:'Alice', age: 38, eyes: 'brown'}),\n  (bob {name: 'Bob', age: 25, eyes: 'blue'}),\n  (charlie {name: 'Charlie', age: 53, eyes: 'green'}),\n  (daniel {name: 'Daniel', age: 54, eyes: 'brown'}),\n  (eskil {name: 'Eskil', age: 41, eyes: 'blue', array: ['one', 'two', 'three']}),\n  (alice)-[:KNOWS]->(bob),\n  (alice)-[:KNOWS]->(charlie),\n  (bob)-[:KNOWS]->(daniel),\n  (charlie)-[:KNOWS]->(daniel),\n  (bob)-[:MARRIED]->(eskil)\n$$) as (title gtype);\n")),(0,r.kt)("h1",{id:"functions"},"Functions"),(0,r.kt)("h2",{id:"head"},"Head()"),(0,r.kt)("h2",{id:"keys"},"Keys()"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"keys")," returns a list containing the string representations for all the property names of a vertex, edge, or map."),(0,r.kt)("h3",{id:"syntax"},"Syntax"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"keys(expression)")),(0,r.kt)("h3",{id:"returns"},"Returns"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"A list containing String elements.")),(0,r.kt)("h3",{id:"arguments"},"Arguments"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"expression"),(0,r.kt)("td",{parentName:"tr",align:"center"},"An expression returning a vertex, edge, or map.")))),(0,r.kt)("h3",{id:"considerations"},"Considerations"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"keys(null) returns null.")),(0,r.kt)("h3",{id:"example-1-keys"},"Example 1. keys()"),(0,r.kt)("h4",{id:"query"},"Query"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM cypher('lists', $$\n    MATCH (a) WHERE a.name = 'Alice'\n    RETURN keys(a)\n$$) as (keys gtype);\n")),(0,r.kt)("p",null,"A list containing the names of all the properties on the node bound to a is returned."),(0,r.kt)("h4",{id:"result"},"Result"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"keys"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},'["eyes","name","age"]')))),(0,r.kt)("h2",{id:"labels"},"Labels()"),(0,r.kt)("p",null,"labels returns a list containing the string representations for all the labels of a node."),(0,r.kt)("h3",{id:"syntax-1"},"Syntax"),(0,r.kt)("p",null,"labels(node)"),(0,r.kt)("h3",{id:"returns-1"},"Returns"),(0,r.kt)("p",null,"A list containing String elements."),(0,r.kt)("h3",{id:"arguments-1"},"Arguments"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Name"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},"expression"),(0,r.kt)("td",{parentName:"tr",align:"center"},"An expression returning a vertex or edge.")))),(0,r.kt)("h3",{id:"considerations-1"},"Considerations"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"labels(null) returns null.")),(0,r.kt)("h3",{id:"example-1-labels"},"Example 1. labels()"),(0,r.kt)("h4",{id:"query-1"},"Query"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM cypher('lists', $$\n    MATCH (a) WHERE a.name = 'Alice'\n    RETURN labels(a)\n$$) as (labels gtype);\n")),(0,r.kt)("p",null,"A list containing all the labels of the node bound to a is returned."),(0,r.kt)("h3",{id:"result-1"},"Result"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"labels"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},'["Person"]')))),(0,r.kt)("h2",{id:"nodes"},"Nodes()"),(0,r.kt)("h2",{id:"relationships"},"Relationships()"))}c.isMDXComponent=!0}}]);